import { LoadingIcon } from "@/components/LoadingIcon";
import { doc } from "firebase/firestore";
import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { useFirestore, useFirestoreDocData } from "reactfire";

export default function Home() {
  const [allowAudio, setAllowAudio] = useState(false);
  const db = useFirestore();

  const dbRef = doc(db, "audio/settings");
  const { status, data } = useFirestoreDocData(dbRef);

  const [loading, setLoading] = useState(true);
  useEffect(() => {
    if (
      status !== "success" ||
      !greatestRef.current ||
      !squidgameRef.current ||
      !timerRef.current
    ) {
      setLoading(true);
      return;
    }

    setLoading(false);
    if (allowAudio) {
      if (data.play === "SQUID") {
        timerRef.current.pause();
        timerRef.current.currentTime = 0;
        greatestRef.current.pause();
        greatestRef.current.currentTime = 0;
        void squidgameRef.current.play();
        squidgameRef.current.currentTime = 0;
      }
      if (data.play === "TIMER") {
        void timerRef.current.play();
        timerRef.current.currentTime = 0;
        greatestRef.current.pause();
        greatestRef.current.currentTime = 0;
        squidgameRef.current.pause();
        squidgameRef.current.currentTime = 0;
      }
      if (data.play === "GREATEST") {
        timerRef.current.pause();
        timerRef.current.currentTime = 0;
        void greatestRef.current.play();
        greatestRef.current.currentTime = 0;
        squidgameRef.current.pause();
        squidgameRef.current.currentTime = 0;
      }
      if (data.play === "STOP") {
        timerRef.current.pause();
        timerRef.current.currentTime = 0;
        greatestRef.current.pause();
        greatestRef.current.currentTime = 0;
        squidgameRef.current.pause();
        squidgameRef.current.currentTime = 0;
      }
    } else {
      timerRef.current.pause();
      timerRef.current.currentTime = 0;
      greatestRef.current.pause();
      greatestRef.current.currentTime = 0;
      squidgameRef.current.pause();
      squidgameRef.current.currentTime = 0;
    }
  }, [allowAudio, data, status]);

  const squidgameRef = useRef<HTMLAudioElement>(null);
  const greatestRef = useRef<HTMLAudioElement>(null);
  const timerRef = useRef<HTMLAudioElement>(null);

  return status === "success" ? (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <audio loop ref={timerRef} className="hidden">
        <source src="/times_up.mp3" type="audio/mp3" />
      </audio>
      <audio loop ref={greatestRef} className="hidden">
        <source src="/greatest_in_the_world.mp3" type="audio/mp3" />
      </audio>
      <audio loop ref={squidgameRef} className="hidden">
        <source src="/squidgame.mp3" type="audio/mp3" />
      </audio>
      <main className="flex min-h-screen w-full flex-col items-center justify-center bg-[url('/BG_MOBILE.jpg')] bg-cover bg-center">
        <div className="flex w-full max-w-[300px] flex-col gap-2 rounded-md bg-white p-2">
          {loading ? (
            <LoadingIcon className="my-12 animate-spin self-center" />
          ) : (
            <>
              <p className="w-full text-center font-[Arial] text-base text-black">
                Allow audio?
              </p>
              <div className="flex w-full flex-col gap-1 p-2 font-[Arial]">
                <button
                  disabled={loading}
                  onClick={() => setAllowAudio(true)}
                  className={`${allowAudio ? "bg-green-400" : "bg-white"} w-full rounded-md border border-green-400 py-2`}
                >
                  Allow
                </button>
                <button
                  disabled={loading}
                  onClick={() => setAllowAudio(false)}
                  className={`${!allowAudio ? "bg-red-400" : "bg-white"} w-full rounded-md border border-red-400 py-2`}
                >
                  Do not Allow
                </button>
              </div>
            </>
          )}
        </div>
      </main>
    </>
  ) : null;
}
